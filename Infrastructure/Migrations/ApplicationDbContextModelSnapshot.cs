// <auto-generated />
using System;
using Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d3155a2-95f8-4d9b-bc24-662ae053f1c9"),
                            BookingDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.0,
                            RoomId = new Guid("a98b8a9d-4c5a-4a90-a2d2-5f1441b93db6"),
                            UserId = new Guid("aaf21a7d-8fc3-4c9f-8a8e-1eeec8dcd462")
                        },
                        new
                        {
                            Id = new Guid("efeb3d13-3dab-46c9-aa9a-9f22dd58e06e"),
                            BookingDate = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 150.0,
                            RoomId = new Guid("4e1cb3d9-bc3b-4997-a3d5-0c56cf17fe7a"),
                            UserId = new Guid("c6c45f7c-2dfe-4c1e-9a9b-8b173c71b32c")
                        },
                        new
                        {
                            Id = new Guid("0bf4a177-98b8-4f67-8a56-95669c320890"),
                            BookingDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 200.0,
                            RoomId = new Guid("c6898b7e-ee09-4b36-8b20-22e8c2a63e29"),
                            UserId = new Guid("f44c3eb4-2c8a-4a77-a31b-04c4619aa15a")
                        });
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostOfficeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9e85d04-548c-4f98-afe9-2a8831c62a90"),
                            Country = "United States",
                            CountryCode = "US",
                            Name = "New York",
                            PostOfficeCode = "NYC"
                        },
                        new
                        {
                            Id = new Guid("8d2aeb7a-7c67-4911-aa2c-d6a3b4dc7e9e"),
                            Country = "United Kingdom",
                            CountryCode = "UK",
                            Name = "London",
                            PostOfficeCode = "LDN"
                        },
                        new
                        {
                            Id = new Guid("3c7e66f5-46a9-4b8d-8e90-85b5a9e2c2fd"),
                            Country = "Japan",
                            CountryCode = "JP",
                            Name = "Tokyo",
                            PostOfficeCode = "TKY"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FloorsNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98c2c9fe-1a1c-4eaa-a7f5-b9d19b246c27"),
                            CityId = new Guid("f9e85d04-548c-4f98-afe9-2a8831c62a90"),
                            Description = "A luxurious hotel with top-notch amenities.",
                            FloorsNumber = 10,
                            Name = "Luxury Inn",
                            PhoneNumber = "1234567890",
                            Rating = 4.5f,
                            StreetAddress = "123 Main Street"
                        },
                        new
                        {
                            Id = new Guid("bfa4173d-7893-48b9-a497-5f4c7fb2492b"),
                            CityId = new Guid("8d2aeb7a-7c67-4911-aa2c-d6a3b4dc7e9e"),
                            Description = "A cozy lodge nestled in the heart of nature.",
                            FloorsNumber = 3,
                            Name = "Cozy Lodge",
                            PhoneNumber = "2012345678",
                            Rating = 3.8f,
                            StreetAddress = "456 Oak Avenue"
                        },
                        new
                        {
                            Id = new Guid("9461e08b-92d3-45da-b6b3-efc0cfcc4a3a"),
                            CityId = new Guid("3c7e66f5-46a9-4b8d-8e90-85b5a9e2c2fd"),
                            Description = "A resort with breathtaking sunset views over the ocean.",
                            FloorsNumber = 5,
                            Name = "Sunset Resort",
                            PhoneNumber = "312345678",
                            Rating = 4.2f,
                            StreetAddress = "789 Beachfront Road"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f5cc9f0-796f-498d-9f3f-9e5249a4f6ae"),
                            Amount = 1500.0,
                            BookingId = new Guid("0bf4a177-98b8-4f67-8a56-95669c320890"),
                            Method = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1c8d70bd-2534-4991-bddf-84c7edee1a79"),
                            Amount = 1200.0,
                            BookingId = new Guid("efeb3d13-3dab-46c9-aa9a-9f22dd58e06e"),
                            Method = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("8f974636-4f53-48d9-af99-2f7f1d3e0474"),
                            Amount = 2000.0,
                            BookingId = new Guid("7d3155a2-95f8-4d9b-bc24-662ae053f1c9"),
                            Method = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63e4bb25-28b1-4fc4-9b93-9254d94dab23"),
                            BookingId = new Guid("0bf4a177-98b8-4f67-8a56-95669c320890"),
                            Comment = "Excellent service and comfortable stay!",
                            Rating = 4.8f,
                            ReviewDate = new DateTime(2023, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("85a5a0b4-0e04-4c46-b7ac-6cf609e4f2aa"),
                            BookingId = new Guid("efeb3d13-3dab-46c9-aa9a-9f22dd58e06e"),
                            Comment = "Friendly staff and great location.",
                            Rating = 4.5f,
                            ReviewDate = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("192045db-c6db-49c9-aa6b-2e3d6c7f3b79"),
                            BookingId = new Guid("7d3155a2-95f8-4d9b-bc24-662ae053f1c9"),
                            Comment = "Clean rooms and beautiful views.",
                            Rating = 4.2f,
                            ReviewDate = new DateTime(2023, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a98b8a9d-4c5a-4a90-a2d2-5f1441b93db6"),
                            Capacity = 2,
                            Rating = 4.5f,
                            RoomTypeId = new Guid("5a5de3b8-3ed8-4f0a-bda9-cf73225a64a1")
                        });
                });

            modelBuilder.Entity("Domain.Entities.RoomAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomAmenities");
                });

            modelBuilder.Entity("Domain.Entities.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PricePerNight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a5de3b8-3ed8-4f0a-bda9-cf73225a64a1"),
                            Category = 0,
                            HotelId = new Guid("98c2c9fe-1a1c-4eaa-a7f5-b9d19b246c27"),
                            PricePerNight = 100f
                        },
                        new
                        {
                            Id = new Guid("d67ddbe4-1f1a-4d85-bcc1-ec3a475ecb68"),
                            Category = 3,
                            HotelId = new Guid("bfa4173d-7893-48b9-a497-5f4c7fb2492b"),
                            PricePerNight = 150f
                        },
                        new
                        {
                            Id = new Guid("4b4c0ea5-0b9a-4a20-8ad9-77441fb912d2"),
                            Category = 2,
                            HotelId = new Guid("9461e08b-92d3-45da-b6b3-efc0cfcc4a3a"),
                            PricePerNight = 200f
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6c45f7c-2dfe-4c1e-9a9b-8b173c71b32c"),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "hashedpassword1",
                            PhoneNumber = "1234567890",
                            Salt = "salt1",
                            isAdmin = false
                        },
                        new
                        {
                            Id = new Guid("aaf21a7d-8fc3-4c9f-8a8e-1eeec8dcd462"),
                            Email = "alice.smith@example.com",
                            FirstName = "Alice",
                            LastName = "Smith",
                            PasswordHash = "hashedpassword2",
                            PhoneNumber = "0987654321",
                            Salt = "salt2",
                            isAdmin = false
                        },
                        new
                        {
                            Id = new Guid("f44c3eb4-2c8a-4a77-a31b-04c4619aa15a"),
                            Email = "robert.johnson@example.com",
                            FirstName = "Robert",
                            LastName = "Johnson",
                            PasswordHash = "hashedpassword3",
                            PhoneNumber = "1122334455",
                            Salt = "salt3",
                            isAdmin = true
                        });
                });

            modelBuilder.Entity("RoomAmenityRoomType", b =>
                {
                    b.Property<Guid>("AmenitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmenitiesId", "RoomTypesId");

                    b.HasIndex("RoomTypesId");

                    b.ToTable("RoomAmenityRoomType");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Hotel", b =>
                {
                    b.HasOne("Domain.Entities.City", null)
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Booking", null)
                        .WithOne("Payment")
                        .HasForeignKey("Domain.Entities.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Booking", null)
                        .WithOne("Review")
                        .HasForeignKey("Domain.Entities.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.HasOne("Domain.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("RoomAmenityRoomType", b =>
                {
                    b.HasOne("Domain.Entities.RoomAmenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RoomType", null)
                        .WithMany()
                        .HasForeignKey("RoomTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("Domain.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
